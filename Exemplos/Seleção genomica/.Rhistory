MAP = "NULL",
#geno.impute.method = "MNI",
predict.method = "GBLUP")
M[poptr,]
phe.tr <- data.frame(ind=phe$ind, p530=phe$p530)
phe.tr
phe.tr <- data.frame(ind=phe$ind, p530=phe$p530)
phe.tr <- phe.tr[poptr]
phe.tr <- data.frame(ind=phe$ind, p530=phe$p530)
phe.tr <- phe.tr[poptr, ]
phe.tr
predict_gblup <- bwgs.predict(geno_train = M[poptr,],
pheno_train = phe.tr,
geno_target = M[popvl,],
#MAXNA = 0.2,
#MAF = 0.05,
geno.reduct.method = "NULL",
reduct.size = "NULL",
r2 = "NULL",
pval = "NULL",
MAP = "NULL",
#geno.impute.method = "MNI",
predict.method = "GBLUP")
phe.tr <- data.frame(ind=phe$ind, p530=phe$p530)
phe.tr <- phe.tr[poptr, ]
phe.tr
gen.tr <- M[poptr,]
gen.tr
predict_gblup <- bwgs.predict(geno_train = gen.tr,
pheno_train = phe.tr,
geno_target = M[popvl,],
#MAXNA = 0.2,
#MAF = 0.05,
geno.reduct.method = "NULL",
reduct.size = "NULL",
r2 = "NULL",
pval = "NULL",
MAP = "NULL",
#geno.impute.method = "MNI",
predict.method = "GBLUP")
phe.tr <- data.frame(ind=phe$ind, p530=phe$p530)
phe.tr <- phe.tr[poptr, ]
phe.tr
gen.tr <- M[poptr,]
gen.tr
gen.vl <- M[popvl,]
gen.vl
predict_gblup <- bwgs.predict(geno_train = gen.tr,
pheno_train = phe.tr,
geno_target = gen.vl,
#MAXNA = 0.2,
#MAF = 0.05,
geno.reduct.method = "NULL",
reduct.size = "NULL",
r2 = "NULL",
pval = "NULL",
MAP = "NULL",
#geno.impute.method = "MNI",
predict.method = "GBLUP")
predict_gblup <- bwgs.predict(geno_train = gen.tr,
pheno_train = phe.tr,
geno_target = M,
#MAXNA = 0.2,
#MAF = 0.05,
geno.reduct.method = "NULL",
reduct.size = "NULL",
r2 = "NULL",
pval = "NULL",
MAP = "NULL",
#geno.impute.method = "MNI",
predict.method = "GBLUP")
library(BWGS)
data(inra)
# Prediction using GBLUP method
predict_gblup <- bwgs.predict(geno_train = TRAIN47K,
pheno_train = YieldBLUE,
geno_target = TARGET47K,
MAXNA = 0.2,
MAF = 0.05,
geno.reduct.method = "NULL",
reduct.size = "NULL",
r2 = "NULL",
pval = "NULL",
MAP = "NULL",
geno.impute.method = "MNI",
predict.method = "GBLUP")
YieldBLUE
View(YieldBLUE)
YieldBLUE$1
YieldBLUE[1,]
class(YieldBLUE)
phe.tr <- c(ind=phe$ind, p530=phe$p530)
phe.tr <- phe.tr[poptr, ]
phe.tr
phe.tr <- c(phe$ind, phe$p530)
phe.tr <- phe.tr[poptr, ]
phe.tr
phe.tr <- (phe$ind, phe$p530)
phe.tr <- c(phe$ind, phe$p530)
phe.tr <- phe.tr[poptr, ]
phe.tr <- phe[poptr, ]
phe.tr <- c(phe$ind, phe$p530)
phe.tr <- phe.tr[poptr, ]
phe.tr <- phe[poptr, ]
phe.tr <- c(phe$ind, phe$p530)
phe.tr
gen.tr <- M[poptr,]
gen.tr
gen.vl <- M[popvl,]
gen.vl
phe.tr <- phe[poptr, ]
#phe.tr <- c(phe$ind, phe$p530)
phe.tr
gen.tr <- M[poptr,]
gen.tr
gen.vl <- M[popvl,]
gen.vl
YieldBLUE[1]
YieldBLUE[2]
phe.tr <- phe[poptr, ]
phe.tr_1 <- phe.tr$p530
names(phe.tr_1) <- phe.tr$ind
phe.tr
gen.tr <- M[poptr,]
gen.tr
gen.vl <- M[popvl,]
gen.vl
phe.tr <- phe[poptr, ]
phe.tr_1 <- phe.tr$p530
names(phe.tr_1) <- phe.tr$ind
phe.tr_1
gen.tr <- M[poptr,]
gen.tr
gen.vl <- M[popvl,]
gen.vl
phe.tr$ind
phe.tr <- g.tr
names(phe.tr) <- poptr
gen.tr <- M[poptr,]
gen.tr
gen.vl <- M[popvl,]
gen.vl
phe.tr
predict_gblup <- bwgs.predict(geno_train = gen.tr,
pheno_train = phe.tr,
geno_target = gen.vl,
#MAXNA = 0.2,
#MAF = 0.05,
geno.reduct.method = "NULL",
reduct.size = "NULL",
r2 = "NULL",
pval = "NULL",
MAP = "NULL",
#geno.impute.method = "MNI",
predict.method = "GBLUP")
predict_gblup <- bwgs.predict(geno_train = gen.tr,
pheno_train = phe.tr,
geno_target = gen.vl,
#MAXNA = 0.2,
#MAF = 0.05,
geno.reduct.method = "NULL",
reduct.size = "NULL",
r2 = "NULL",
pval = "NULL",
MAP = "NULL",
geno.impute.method = "NULL",
predict.method = "GBLUP")
phe.tr <- g.tr
names(phe.tr) <- poptr
gen.tr <- M[poptr,]
gen.tr
gen.vl <- M[popvl,]
gen.vl
predict_gblup <- bwgs.predict(geno_train = gen.tr,
pheno_train = phe.tr,
geno_target = gen.vl,
MAXNA = 0.2,
MAF = 0.05,
geno.reduct.method = "NULL",
reduct.size = "NULL",
r2 = "NULL",
pval = "NULL",
MAP = "NULL",
geno.impute.method = "NULL",
predict.method = "GBLUP")
predict_gblup <- bwgs.predict(geno_train = gen.tr,
pheno_train = phe.tr,
geno_target = gen.vl,
MAXNA = 0.2,
MAF = 0.05,
geno.reduct.method = "NULL",
reduct.size = "NULL",
r2 = "NULL",
pval = "NULL",
MAP = "NULL",
geno.impute.method = "MNI",
predict.method = "GBLUP")
predict_gblup <- bwgs.predict(geno_train = gen.tr,
pheno_train = phe.tr,
geno_target = gen.vl,
MAXNA = 0.2,
MAF = 0.01,
geno.reduct.method = "NULL",
reduct.size = "NULL",
r2 = "NULL",
pval = "NULL",
MAP = "NULL",
geno.impute.method = "MNI",
predict.method = "GBLUP")
predict_gblup <- bwgs.predict(geno_train = gen.tr,
pheno_train = phe.tr,
geno_target = gen.vl,
MAXNA = 0.2,
MAF = 0.001,
geno.reduct.method = "NULL",
reduct.size = "NULL",
r2 = "NULL",
pval = "NULL",
MAP = "NULL",
geno.impute.method = "MNI",
predict.method = "GBLUP")
predict_gblup <- bwgs.predict(geno_train = gen.tr,
pheno_train = phe.tr,
geno_target = gen.vl,
MAXNA = 0.2,
MAF = 0.0001,
geno.reduct.method = "NULL",
reduct.size = "NULL",
r2 = "NULL",
pval = "NULL",
MAP = "NULL",
geno.impute.method = "MNI",
predict.method = "GBLUP")
View(predict_gblup)
predict_gblup <- bwgs.predict(geno_train = gen.tr,
pheno_train = phe.tr,
geno_target = gen.vl,
MAXNA = 0.2,
MAF = 0.0001,
geno.reduct.method = "NULL",
reduct.size = "NULL",
r2 = "NULL",
pval = "NULL",
MAP = "NULL",
geno.impute.method = "MNI",
predict.method = "GBLUP")
predict_gblup <- bwgs.predict(geno_train = gen.tr,
pheno_train = phe.tr,
geno_target = gen.vl,
MAXNA = 0.2,
MAF = 0.0001,
geno.reduct.method = "NULL",
reduct.size = "NULL",
r2 = "NULL",
pval = "NULL",
MAP = "NULL",
geno.impute.method = "MNI",
predict.method = "GBLUP")
predict_gblup <- bwgs.predict(geno_train = gen.tr,
pheno_train = phe.tr,
geno_target = gen.vl,
MAXNA = 0.2,
MAF = 0.0001,
geno.reduct.method = "NULL",
reduct.size = "NULL",
r2 = "NULL",
pval = "NULL",
MAP = "NULL",
geno.impute.method = "MNI",
predict.method = "GBLUP")
predict_gblup <- bwgs.predict(geno_train = gen.tr,
pheno_train = phe.tr,
geno_target = gen.vl,
MAXNA = 0.2,
MAF = 0.00001,
geno.reduct.method = "NULL",
reduct.size = "NULL",
r2 = "NULL",
pval = "NULL",
MAP = "NULL",
geno.impute.method = "MNI",
predict.method = "GBLUP")
predict_gblup <- bwgs.predict(geno_train = gen.tr,
pheno_train = phe.tr,
geno_target = gen.vl,
MAXNA = 0.5,
MAF = 0.00001,
geno.reduct.method = "NULL",
reduct.size = "NULL",
r2 = "NULL",
pval = "NULL",
MAP = "NULL",
geno.impute.method = "MNI",
predict.method = "GBLUP")
predict_gblup <- bwgs.predict(geno_train = gen.tr,
pheno_train = phe.tr,
geno_target = gen.vl,
MAXNA = 0.1,
MAF = 0.001,
geno.reduct.method = "NULL",
reduct.size = "NULL",
r2 = "NULL",
pval = "NULL",
MAP = "NULL",
geno.impute.method = "MNI",
predict.method = "GBLUP")
predict_gblup <- bwgs.predict(geno_train = gen.tr,
pheno_train = phe.tr,
geno_target = gen.vl,
MAXNA = 0.1,
MAF = 0.0,
geno.reduct.method = "NULL",
reduct.size = "NULL",
r2 = "NULL",
pval = "NULL",
MAP = "NULL",
geno.impute.method = "MNI",
predict.method = "GBLUP")
predict_gblup <- bwgs.predict(geno_train = gen.tr,
pheno_train = phe.tr,
geno_target = gen.vl,
MAXNA = 0.1,
MAF = 0.05,
geno.reduct.method = "NULL",
reduct.size = "NULL",
r2 = "NULL",
pval = "NULL",
MAP = "NULL",
geno.impute.method = "MNI",
predict.method = "GBLUP")
predict_gblup <- bwgs.predict(geno_train = gen.tr,
pheno_train = phe.tr,
geno_target = gen.vl,
MAXNA = 0.2,
MAF = 0.05,
geno.reduct.method = "NULL",
reduct.size = "NULL",
r2 = "NULL",
pval = "NULL",
MAP = "NULL",
geno.impute.method = "MNI",
predict.method = "GBLUP")
predict_gblup <- bwgs.predict(geno_train = gen.tr,
pheno_train = phe.tr,
geno_target = gen.vl,
MAXNA = 0.2,
MAF = 0.01,
geno.reduct.method = "NULL",
reduct.size = "NULL",
r2 = "NULL",
pval = "NULL",
MAP = "NULL",
geno.impute.method = "MNI",
predict.method = "GBLUP")
gpred <- as.data.frame(predict_gblup)
gpred <- as.data.frame(predict_gblup)
gpred
g.vl
gpred <- as.data.frame(predict_gblup)
cor(gpred$gpred, g.vl)
cor(g.hat,g.vl)/0.67
gpred <- as.data.frame(predict_gblup)
cor(gpred$gpred, g.vl)/0.67
gen.tr <- M[poptr,]
gen.tr[1:10, 1:10]
gen.vl <- M[popvl,]
gen.vl[1:10, 1:10]
phe.tr <- g.tr
names(phe.tr) <- poptr
predict_gblup <- bwgs.predict(geno_train = gen.tr,
pheno_train = phe.tr,
geno_target = gen.vl,
MAXNA = 0.2,
MAF = 0.01,
geno.reduct.method = "NULL",
reduct.size = "NULL",
r2 = "NULL",
pval = "NULL",
MAP = "NULL",
geno.impute.method = "MNI",
predict.method = "GBLUP")
plot(gpred$gpred, g.vl, xlim=c(10,45), ylim=c(10,45), xlab='GEBV´s', ylab='Valores fenotípicos', main='Valores Fenotípicos vs GEBV´s')
abline(0,1,col="blue")
abline(lm(g.vl~gpred$gpred), col="red", lwd=3, lty=2)
gpred <- as.data.frame(predict_gblup)
cor(gpred$gpred,g.vl)
pheG<-data.frame(phe,G)  # troquei a matriz M pela G
Lgblup <- regress(p530~1,~G,data=pheG,pos=rep(1,2)) # troquei pheM, por pheG
View(Lgblup)
View(Lgblup)
pheG<-data.frame(phe,G)  # troquei a matriz M pela G
Lgblup <- regress(p530 ~ 1, ~ G,data=pheG,pos=rep(1,2)) # troquei pheM, por pheG
plot(pheG$p530, Lgblup$predicted)
library(BGLR)
install.packages("bWGR")
View(M)
library(bWGR)
m0 <- emML(pheG$p530, M)
class(M)
m0 <- emML(pheG$p530, as.matrix(M))
m0 <- emML(pheG$p530, as.matrix(M))
str(m0)
plot(m0$hat, Lgblup$predicted)
m0 <- emML(pheG$p530, as.matrix(M))
m1 <- emBA(pheG$p530, as.matrix(M))
str(m0)
plot(m1$hat, Lgblup$predicted)
pheG<-data.frame(phe,G)  # troquei a matriz M pela G
Lgblup <- regress(p530 ~ 1, ~ G,data=pheG) # troquei pheM, por pheG
plot(m0$hat, Lgblup$predicted)
plot(m1$hat, Lgblup$predicted)
plot(pheG$p530, Lgblup$predicted)
source('gbuild.R')
model <- emML(g.tr,as.matrix(M[poptr,])
model <- emML(g.tr,as.matrix(M[poptr,]))
model <- emML(g.tr,as.matrix(M[poptr,]))
model
model <- emML(g.tr,as.matrix(M[poptr,]))
str(model)
train1 <- emML(g.tr,as.matrix(M[poptr,]))
str(train1)
m.cat1 <- train1$b
g.hat1 <- as.matrix(M[popvl,])%*%m.cat1 + mean(g.tr)
g.hat1 <- as.matrix(M[popvl,])%*%m.cat1 + mean(g.tr)
cor(g.hat1, g.vl)
plot(g.hat1, g.vl, xlim=c(10,45), ylim=c(10,45), xlab='GEBV´s', ylab='Valores fenotípicos', main='Valores Fenotípicos vs GEBV´s')
abline(0,1,col="blue")
abline(lm(g.vl~gpred$gpred), col="red", lwd=3, lty=2)
cor(g.hat1, g.vl)/0.67
cor(g.hat, g.hat1)
cor(m.cat, m.cat1)
plot(g.hat1, g.vl, xlim=c(10,45), ylim=c(10,45), xlab='GEBV´s', ylab='Valores fenotípicos', main='Valores Fenotípicos vs GEBV´s')
abline(0,1,col="blue")
abline(lm(g.vl~gpred$gpred), col="red", lwd=3, lty=2)
plot(g.hat1, g.vl, xlim=c(10,45), ylim=c(10,45), xlab='GEBV´s', ylab='Valores fenotípicos', main='Valores Fenotípicos vs GEBV´s')
abline(0,1,col="blue")
abline(lm(g.vl~g.hat1), col="red", lwd=3, lty=2)
library(rrBLUP)
library(bWGR)
library(lattice)
source('gbuild.R')
gen <- read.table("genotype.txt",header=TRUE)
phe <- read.table("phenotype.txt",header=TRUE)
gen[1:10, 1:10]
phe[1:10, ]
M <- gen[as.character(phe$ind),]
M[1:15,1:15]
poptr <- rownames(M)[201:1000]
popvl <- rownames(M)[1:200]
g.tr <- phe[phe$ind%in%poptr,]$p530
g.vl <- phe[phe$ind%in%popvl,]$p530
train <- mixed.solve(g.tr,M[poptr,])
str(train)
m.cat <- train$u
g.hat <- as.matrix(M[popvl,])%*%m.cat + mean(g.tr)
cor(g.hat,g.vl)
plot(g.hat,g.vl,xlim=c(10,45),ylim=c(10,45), xlab = 'GEBV´s', ylab = 'Valores fenotípicos', main = 'Valores Fenotípicos vs GEBV´s')
abline(0,1,col="blue")
abline(lm(g.vl~g.hat), col="red", lwd=3, lty=2)
cor(g.hat,g.vl)/0.67
train1 <- emML(g.tr,as.matrix(M[poptr,]))
str(train1)
m.cat1 <- train1$b
g.hat1 <- as.matrix(M[popvl,])%*%m.cat1 + mean(g.tr)
cor(g.hat1, g.vl)
plot(g.hat1, g.vl, xlim=c(10,45), ylim=c(10,45), xlab='GEBV´s', ylab='Valores fenotípicos', main='Valores Fenotípicos vs GEBV´s')
abline(0,1,col="blue")
abline(lm(g.vl~g.hat1), col="red", lwd=3, lty=2)
cor(g.hat1, g.vl)/0.67
cor(g.hat, g.hat1)
cor(m.cat, m.cat1)
library(rrBLUP)
library(bWGR)
library(lattice)
gen <- read.table("genotype.txt",header=TRUE)
phe <- read.table("phenotype.txt",header=TRUE)
gen[1:10, 1:10]
phe[1:10, ]
M <- gen[as.character(phe$ind),]
M[1:15,1:15]
poptr <- rownames(M)[201:1000]
popvl <- rownames(M)[1:200]
g.tr <- phe[phe$ind%in%poptr,]$p530
g.vl <- phe[phe$ind%in%popvl,]$p530
train <- mixed.solve(g.tr,M[poptr,])
str(train)
m.cat <- train$u
g.hat <- as.matrix(M[popvl,])%*%m.cat + mean(g.tr)
cor(g.hat,g.vl)
plot(g.hat,g.vl,xlim=c(10,45),ylim=c(10,45), xlab = 'GEBV´s', ylab = 'Valores fenotípicos', main = 'Valores Fenotípicos vs GEBV´s')
abline(0,1,col="blue")
abline(lm(g.vl~g.hat), col="red", lwd=3, lty=2)
cor(g.hat,g.vl)/0.67
train1 <- emML(g.tr,as.matrix(M[poptr,]))
str(train1)
m.cat1 <- train1$b
g.hat1 <- as.matrix(M[popvl,])%*%m.cat1 + mean(g.tr)
cor(g.hat1, g.vl)
plot(g.hat1, g.vl, xlim=c(10,45), ylim=c(10,45), xlab='GEBV´s', ylab='Valores fenotípicos', main='Valores Fenotípicos vs GEBV´s')
abline(0,1,col="blue")
abline(lm(g.vl~g.hat1), col="red", lwd=3, lty=2)
cor(g.hat1, g.vl)/0.67
cor(g.hat, g.hat1)
cor(m.cat, m.cat1)
install.packages("ggplot2")
install.packages("rgl")
install.packages("hierfstat")
install.packages("adegenet")
install.packages("radmixture")
install.packages('devtools')
library(devtools)
install_github('QuantGen/MTM')
